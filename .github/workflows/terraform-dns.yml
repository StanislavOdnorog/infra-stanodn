name: "Terraform DNS Management"

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/cloudflare/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/cloudflare/**'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  detect-domains:
    name: "Detect Domains"
    runs-on: self-hosted
    outputs:
      domains: ${{ steps.get-domains.outputs.domains }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Get domain directories
      id: get-domains
      run: |
        # Find all directories in terraform/cloudflare/ and extract domain names
        DOMAINS=$(find terraform/cloudflare -maxdepth 1 -type d -name "*.*" | sed 's|terraform/cloudflare/||' | jq -R -s -c 'split("\n")[:-1]')
        echo "domains=$DOMAINS" >> $GITHUB_OUTPUT
        echo "Found domains: $DOMAINS"

  terraform:
    name: "Terraform DNS - ${{ matrix.domain }}"
    runs-on: ubuntu-latest
    needs: detect-domains
    
    strategy:
      matrix:
        domain: ${{ fromJson(needs.detect-domains.outputs.domains) }}
    
    env:
      TF_VERSION: "1.7.0"
      TF_WORKING_DIR: "terraform/cloudflare/${{ matrix.domain }}"
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Convert domain to secret name
      id: secret-name
      run: |
        SECRET_NAME="CLOUDFLARE_ZONE_ID_${DOMAIN//./_}"
        echo "secret_name=$SECRET_NAME" >> $GITHUB_OUTPUT
        echo "Using secret: $SECRET_NAME"
      env:
        DOMAIN: ${{ matrix.domain }}

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Validate
      id: validate
      run: terraform validate
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      working-directory: ${{ env.TF_WORKING_DIR }}
      env:
        TF_VAR_cf_zone_id: ${{ secrets[steps.secret-name.outputs.secret_name] }}
        TF_VAR_cf_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
        DOMAIN: ${{ matrix.domain }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform DNS for ${process.env.DOMAIN} üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN || 'No changes. Infrastructure is up-to-date.'}
          \`\`\`
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      working-directory: ${{ env.TF_WORKING_DIR }}
      env:
        TF_VAR_cf_zone_id: ${{ secrets[steps.secret-name.outputs.secret_name] }}
        TF_VAR_cf_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    - name: Commit and Push State Changes
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add terraform.tfstate terraform.tfstate.backup
        git diff --quiet && git diff --staged --quiet || git commit -m "Update Terraform state for ${{ matrix.domain }} [skip ci]"
        git push
      working-directory: ${{ env.TF_WORKING_DIR }}