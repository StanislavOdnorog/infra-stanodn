def playbookChoices = []
node {
    checkout scm
    def playbooks = sh(returnStdout: true, script: "find ansible/playbooks/ | grep .yml 2>/dev/null || true")
    playbooks.split().each { playbook ->
        playbookChoices << playbook.replace('ansible/playbooks/', '')
    }
    playbookChoices.add(0, 'update_playbooks')
}

pipeline {
    agent {
        label 'ansible'
    }

    parameters {
        choice(
            name: 'PLAYBOOK',
            choices: playbookChoices,
            description: 'Select playbook to run or update_playbooks to refresh the list'
        )
        string(
            name: 'INVENTORY_FILE',
            defaultValue: 'ansible/hosts.ini',
            description: 'Path to inventory file (optional)'
        )
        booleanParam(
            name: 'DRY_RUN',
            defaultValue: false,
            description: 'Run in check mode (dry run)'
        )
        string(
            name: 'LIMIT',
            defaultValue: '',
            description: 'Limit execution to specific hosts (optional)'
        )
        string(
            name: 'TAGS',
            defaultValue: '',
            description: 'Only run tasks with these tags (optional)'
        )
        string(
            name: 'SKIPPED_TAGS',
            defaultValue: '',
            description: 'Skip tasks with these tags (optional)'
        )
        string(
            name: 'START_AT_TASK',
            defaultValue: '',
            description: 'Start execution at this task (optional)'
        )
    }

    options {
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    environment {
        ANSIBLE_FORCE_COLOR = '1'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Update Playbooks List') {
            when {
                expression { params.PLAYBOOK == 'update_playbooks' }
            }
            steps {
                echo '✅ Playbook list updated successfully!'
            }
        }

        stage('Validate Playbook') {
            when {
                expression { params.PLAYBOOK != 'update_playbooks' }
            }
            steps {
                script {
                    if (!params.PLAYBOOK) {
                        error "Please specify a playbook to run"
                    }
                    if (!fileExists("ansible/playbooks/${params.PLAYBOOK}")) {
                        error "Playbook ${params.PLAYBOOK} does not exist in ansible/playbooks/"
                    }
                }
                sh """
                    cd ansible
                    ansible-playbook --syntax-check playbooks/${params.PLAYBOOK} ${params.INVENTORY_FILE ? "-i ${params.INVENTORY_FILE}" : ""}
                """
            }
        }

        stage('Run Ansible Playbook') {
            when {
                expression { params.PLAYBOOK != 'update_playbooks' }
            }   
            steps {
                withCredentials([file(credentialsId: 'ansible-inventory', variable: 'INVENTORY_CONTENT')]) {
                    writeFile file: 'ansible/hosts.ini', text: readFile(env.INVENTORY_CONTENT)
                    
                    ansiblePlaybook(
                        playbook: "ansible/playbooks/${params.PLAYBOOK}",
                        inventory: '${params.INVENTORY_FILE}',
                        credentialsId: 'ansible-ssh-key',
                        disableHostKeyChecking: true,
                        colorized: true,
                        extraVars: [
                            ansible_python_interpreter: '/usr/bin/python3'
                        ],
                        limit: params.LIMIT ?: '',
                        tags: params.TAGS ?: '',
                        skippedTags: params.SKIPPED_TAGS ?: '',
                        startAtTask: params.START_AT_TASK ?: '',
                        checkMode: params.DRY_RUN
                    )
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            script {
                currentBuild.description = "Playbook: ${params.PLAYBOOK}"
            }
        }
        success {
            echo '✅ Playbook executed successfully!'
        }
        failure {
            echo '❌ Playbook execution failed!'
        }
    }
} 