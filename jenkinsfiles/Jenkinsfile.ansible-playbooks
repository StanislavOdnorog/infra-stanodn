def playbookChoices = []
node {
    checkout scm
    def playbooks = sh(returnStdout: true, script: "find ansible/playbooks/ | grep .yml 2>/dev/null || true")
    playbooks.split().each { playbook ->
        playbookChoices << playbook.replace('ansible/playbooks/', '')
    }
    playbookChoices.add(0, 'update_playbooks')
}

pipeline {
    agent {
        label 'ansible'
    }

    parameters {
        choice(
            name: 'PLAYBOOK',
            choices: playbookChoices,
            description: 'Select playbook to run or update_playbooks to refresh the list'
        )
        string(
            name: 'TARGET',
            defaultValue: 'all',
            description: 'Target host or group (e.g. ai-server, custom-vms, proxmox-cluster, all)'
        )
        booleanParam(
            name: 'DRY_RUN',
            defaultValue: false,
            description: 'Run in check mode (dry run)'
        )
        string(
            name: 'TAGS',
            defaultValue: '',
            description: 'Only run tasks with these tags (optional)'
        )
        text(
            name: 'EXTRA_VARS',
            defaultValue: '''var1=value1
var2=value2
var3=value3''',
            description: 'Extra variables to pass to the playbook (one per line, format: key=value)'
        )
    }

    options {
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    environment {
        ANSIBLE_FORCE_COLOR = '1'
        ANSIBLE_VAULT_PASSWORD_FILE = '${WORKSPACE}/ansible/.vault_pass'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Setup') {
            steps {
                withCredentials([
                    file(credentialsId: 'ansible-inventory', variable: 'INVENTORY_CONTENT'),
                    string(credentialsId: 'ansible-vault-password', variable: 'VAULT_PASSWORD')
                ]) {
                    writeFile file: 'ansible/hosts.ini', text: readFile(env.INVENTORY_CONTENT)
                    writeFile file: 'ansible/.vault_pass', text: env.VAULT_PASSWORD
                }
            }
        }

        stage('Update Playbooks List') {
            when {
                expression { params.PLAYBOOK == 'update_playbooks' }
            }
            steps {
                echo '✅ Playbook list updated successfully!'
            }
        }

        stage('Validate Playbook') {
            when {
                expression { params.PLAYBOOK != 'update_playbooks' }
            }
            steps {
                script {
                    if (!params.PLAYBOOK) {
                        error "Please specify a playbook to run"
                    }
                    if (!fileExists("ansible/playbooks/${params.PLAYBOOK}")) {
                        error "Playbook ${params.PLAYBOOK} does not exist in ansible/playbooks/"
                    }
                }
                sh """
                    cd ansible
                    ansible-playbook --syntax-check playbooks/${params.PLAYBOOK} -i hosts.ini
                """
            }
        }

        stage('Run Ansible Playbook') {
            when {
                expression { params.PLAYBOOK != 'update_playbooks' }
            }   
            steps {
                withCredentials([
                    string(credentialsId: 'ansible-ssh-key-pub', variable: 'ANSIBLE_SSH_KEY_PUB')
                ]) {
                    withEnv(['ANSIBLE_SSH_KEY_PUB=' + env.ANSIBLE_SSH_KEY_PUB]) {
                        script {
                            def extraVars = [
                                ansible_python_interpreter: '/usr/bin/python3',
                                target: params.TARGET
                            ]
                            
                            if (params.EXTRA_VARS?.trim()) {
                                params.EXTRA_VARS.split('\n').each { line ->
                                    if (line.contains('=')) {
                                        def parts = line.split('=', 2)
                                        extraVars[parts[0].trim()] = parts[1].trim()
                                    }
                                }
                            }
                            
                            ansiblePlaybook(
                                playbook: "ansible/playbooks/${params.PLAYBOOK}",
                                inventory: "ansible/hosts.ini",
                                credentialsId: 'ansible-ssh-key',
                                disableHostKeyChecking: true,
                                colorized: true,
                                extraVars: extraVars,
                                tags: params.TAGS ?: '',
                                checkMode: params.DRY_RUN
                            )
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            script {
                currentBuild.description = "Playbook: ${params.PLAYBOOK}, Target: ${params.TARGET}"
            }
        }
        success {
            echo '✅ Playbook executed successfully!'
        }
        failure {
            echo '❌ Playbook execution failed!'
        }
    }
} 