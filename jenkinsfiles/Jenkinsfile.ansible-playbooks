def playbookChoices = []
def targetChoices = ['all', 'localhost']
node {
    checkout scm
    
    // Get playbooks
    def playbooks = sh(returnStdout: true, script: "find ansible/playbooks/ | grep .yml 2>/dev/null || true")
    playbooks.split().each { playbook ->
        playbookChoices << playbook.replace('ansible/playbooks/', '')
    }
    playbookChoices.add(0, 'Update Inventory and Playbooks List')
}

pipeline {
    agent {
        label 'ansible'
    }

    parameters {
        choice(
            name: 'PLAYBOOK',
            choices: playbookChoices,
            description: 'Select playbook to run or Update to refresh the inventory and playbooks list'
        )
        choice(
            name: 'TARGET',
            choices: targetChoices,
            description: 'Select target host or group (will be updated dynamically after Setup)'
        )
        booleanParam(
            name: 'DRY_RUN',
            defaultValue: false,
            description: 'Run in check mode (dry run)'
        )
        string(
            name: 'TAGS',
            defaultValue: '',
            description: 'Only run tasks with these tags (optional)'
        )
        text(
            name: 'EXTRA_VARS',
            defaultValue: '''var1=value1
var2=value2
var3=value3''',
            description: 'Extra variables to pass to the playbook (one per line, format: key=value)'
        )
    }

    options {
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    environment {
        ANSIBLE_FORCE_COLOR = '1'
        ANSIBLE_VAULT_PASSWORD_FILE = '${WORKSPACE}/ansible/.vault_pass'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Setup') {
            steps {
                withCredentials([
                    string(credentialsId: 'ansible-vault-password', variable: 'VAULT_PASSWORD')
                ]) {
                    writeFile file: 'ansible/.vault_pass', text: env.VAULT_PASSWORD
                }
            }
        }

        stage('Update Inventory and Playbooks List') {
            when {
                expression { params.PLAYBOOK == 'Update Inventory and Playbooks List' }
            }
            steps {
                script {
                    echo 'üîÑ Updating inventory and playbook lists...'
                    
                    dir('ansible') {
                        echo "=== CURRENT PLAYBOOKS ==="
                        sh "find playbooks/ -name '*.yml' | sort || true"
                        echo ""
                        echo "=== INVENTORY GRAPH ==="
                        sh "ansible-inventory --graph || true"
                        echo ""
                        echo "=== INVENTORY LIST ==="
                        sh "ansible-inventory --list || true"
                    }
                    
                    echo '\n‚úÖ Inventory and Playbook list updated successfully!'
                    echo 'The choices will be refreshed for your next pipeline run.'
                }
            }
        }

        stage('Select Target') {
            when {
                expression { params.PLAYBOOK != 'Update Inventory and Playbooks List' }
            }
            steps {
                script {
                    echo "üéØ Discovering available targets..."
                    
                    def availableTargets = ['all']
                    
                    try {
                        dir('ansible') {
                            echo "=== Parsing inventory with vault access ==="
                            def jsonOutput = sh(returnStdout: true, script: 'ansible-inventory --list 2>/dev/null || echo "{}"').trim()
                            echo "Raw inventory output length: ${jsonOutput.length()}"
                            
                            if (jsonOutput && jsonOutput != '{}' && jsonOutput.length() > 10) {
                                def inventory = readJSON text: jsonOutput
                                echo "‚úÖ Successfully parsed inventory JSON"
                                
                                // Add all groups (excluding _meta, all, ungrouped)
                                inventory.keySet().each { key ->
                                    if (key != 'all' && key != '_meta' && key != 'ungrouped') {
                                        availableTargets << key
                                    }
                                }
                                
                                // Add all hosts from _meta.hostvars
                                if (inventory._meta && inventory._meta.hostvars) {
                                    inventory._meta.hostvars.keySet().each { host ->
                                        availableTargets << host
                                    }
                                }
                                
                                // Add hosts from group definitions as backup
                                inventory.keySet().each { groupName ->
                                    if (groupName != 'all' && groupName != '_meta' && groupName != 'ungrouped') {
                                        def group = inventory[groupName]
                                        if (group instanceof Map && group.hosts) {
                                            group.hosts.each { host ->
                                                availableTargets << host
                                            }
                                        }
                                    }
                                }
                                
                                availableTargets = availableTargets.unique().sort()
                                echo "Found ${availableTargets.size()} targets: ${availableTargets.join(', ')}"
                                
                            } else {
                                echo "‚ùå No inventory data found, using fallback"
                                availableTargets = ['all', 'localhost']
                            }
                        }
                    } catch (Exception e) {
                        echo "‚ùå Failed to parse inventory: ${e.message}"
                        availableTargets = ['all', 'localhost']
                    }
                    
                    // Present dynamic choice to user
                    env.SELECTED_TARGET = input(
                        message: 'Select target for playbook execution:',
                        parameters: [
                            choice(
                                choices: availableTargets.join('\n'),
                                description: 'Choose the target host or group for this playbook run',
                                name: 'TARGET'
                            )
                        ]
                    )
                    
                    echo "‚úÖ Selected target: ${env.SELECTED_TARGET}"
                }
            }
        }

        stage('Validate Playbook') {
            when {
                expression { params.PLAYBOOK != 'Update Inventory and Playbooks List' }
            }
            steps {
                script {
                    if (!params.PLAYBOOK) {
                        error "Please specify a playbook to run"
                    }
                    if (!fileExists("ansible/playbooks/${params.PLAYBOOK}")) {
                        error "Playbook ${params.PLAYBOOK} does not exist in ansible/playbooks/"
                    }
                }
                dir('ansible') {
                    sh "ansible-playbook --syntax-check playbooks/${params.PLAYBOOK} -e 'target=${env.SELECTED_TARGET}'"
                }
            }
        }

        stage('Run Ansible Playbook') {
            when {
                expression { params.PLAYBOOK != 'Update Inventory and Playbooks List' }
            }
            steps {
                script {
                    def extraVars = [
                        ansible_python_interpreter: '/usr/bin/python3',
                        target: env.SELECTED_TARGET
                    ]
                    
                    if (params.EXTRA_VARS?.trim()) {
                        params.EXTRA_VARS.split('\n').each { line ->
                            if (line.contains('=')) {
                                def parts = line.split('=', 2)
                                extraVars[parts[0].trim()] = parts[1].trim()
                            }
                        }
                    }
                    
                    dir('ansible') {
                        ansiblePlaybook(
                            playbook: "playbooks/${params.PLAYBOOK}",
                            credentialsId: 'ansible-ssh-key',
                            disableHostKeyChecking: true,
                            colorized: true,
                            extraVars: extraVars,
                            tags: params.TAGS ?: '',
                            checkMode: params.DRY_RUN
                        )
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            script {
                currentBuild.description = "Playbook: ${params.PLAYBOOK}, Target: ${env.SELECTED_TARGET ?: 'Update Only'}"
            }
        }
        success {
            echo '‚úÖ Playbook executed successfully!'
        }
        failure {
            echo '‚ùå Playbook execution failed!'
        }
    }
} 