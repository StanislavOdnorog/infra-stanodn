pipeline {
    agent {
        label 'ansible'
    }

    parameters {
        choice(
            name: 'PLAYBOOK',
            choices: script {
                def playbooks = findFiles(glob: 'ansible/playbooks/*.yml')
                return playbooks.collect { it.name }
            },
            description: 'Select playbook to run'
        )
        string(
            name: 'INVENTORY_FILE',
            defaultValue: '',
            description: 'Path to inventory file (optional)'
        )
        booleanParam(
            name: 'DRY_RUN',
            defaultValue: false,
            description: 'Run in check mode (dry run)'
        )
        string(
            name: 'LIMIT',
            defaultValue: '',
            description: 'Limit execution to specific hosts (optional)'
        )
        string(
            name: 'TAGS',
            defaultValue: '',
            description: 'Only run tasks with these tags (optional)'
        )
        string(
            name: 'SKIPPED_TAGS',
            defaultValue: '',
            description: 'Skip tasks with these tags (optional)'
        )
        string(
            name: 'START_AT_TASK',
            defaultValue: '',
            description: 'Start execution at this task (optional)'
        )
    }

    options {
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    environment {
        ANSIBLE_FORCE_COLOR = '1'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Validate Playbook') {
            steps {
                script {
                    if (!params.PLAYBOOK) {
                        error "Please specify a playbook to run"
                    }
                    if (!fileExists("ansible/playbooks/${params.PLAYBOOK}")) {
                        error "Playbook ${params.PLAYBOOK} does not exist in ansible/playbooks/"
                    }
                }
                sh """
                    cd ansible
                    ansible-playbook --syntax-check playbooks/${params.PLAYBOOK} ${params.INVENTORY_FILE ? "-i ${params.INVENTORY_FILE}" : ""}
                """
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                ansiblePlaybook(
                    playbook: "ansible/playbooks/${params.PLAYBOOK}",
                    inventory: params.INVENTORY_FILE ?: '',
                    credentialsId: 'ansible-ssh-key',
                    disableHostKeyChecking: true,
                    colorized: true,
                    extraVars: [
                        ansible_python_interpreter: '/usr/bin/python3'
                    ],
                    limit: params.LIMIT ?: '',
                    tags: params.TAGS ?: '',
                    skippedTags: params.SKIPPED_TAGS ?: '',
                    startAtTask: params.START_AT_TASK ?: '',
                    checkMode: params.DRY_RUN
                )
            }
        }
    }

    post {
        always {
            cleanWs()
            script {
                currentBuild.description = "Playbook: ${params.PLAYBOOK}"
            }
        }
        success {
            echo '✅ Playbook executed successfully!'
        }
        failure {
            echo '❌ Playbook execution failed!'
            emailext(
                subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: """
                    Playbook: ${params.PLAYBOOK}
                    Check console output at ${env.BUILD_URL}
                """,
                recipientProviders: [[$class: 'DevelopersRecipientProvider']]
            )
        }
    }
} 