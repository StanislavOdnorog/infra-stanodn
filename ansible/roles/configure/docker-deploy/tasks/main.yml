---
# Docker Deploy Role Tasks

- name: Validate directory name provided
  assert:
    that:
      - docker_app_dir is defined
      - docker_app_dir != ""
    fail_msg: "docker_app_dir must be specified"

- name: Calculate repository root path
  set_fact:
    repo_root: "{{ inventory_dir }}/../.."
    dest_path: "{{ docker_dest_dir }}/{{ docker_app_dir }}"

- name: Check if source directory exists
  local_action:
    module: stat
    path: "{{ repo_root }}/docker-apps/{{ docker_app_dir }}"
  register: source_dir_stat
  become: false

- name: Fail if source directory doesn't exist
  fail:
    msg: "Source directory {{ repo_root }}/docker-apps/{{ docker_app_dir }} does not exist"
  when: not source_dir_stat.stat.exists

- name: Create docker applications directory
  file:
    path: "{{ docker_dest_dir }}"
    state: directory
    owner: "{{ docker_file_owner }}"
    group: "{{ docker_file_group }}"
    mode: "0755"

- name: Copy entire application directory
  synchronize:
    src: "{{ repo_root }}/docker-apps/{{ docker_app_dir }}/"
    dest: "{{ dest_path }}/"
    owner: false
    group: false
    delete: true
    recursive: true
  delegate_to: localhost
  become: false

- name: Set proper ownership
  file:
    path: "{{ dest_path }}"
    owner: "{{ docker_file_owner }}"
    group: "{{ docker_file_group }}"
    recurse: true

- name: Check if .env.example exists
  stat:
    path: "{{ dest_path }}/.env.example"
  register: env_example_stat

- name: Check if .env already exists
  stat:
    path: "{{ dest_path }}/.env"
  register: env_stat

- name: Copy .env.example to .env if needed
  copy:
    src: "{{ dest_path }}/.env.example"
    dest: "{{ dest_path }}/.env"
    remote_src: true
    owner: "{{ docker_file_owner }}"
    group: "{{ docker_file_group }}"
    mode: "0644"
  when: 
    - env_example_stat.stat.exists
    - not env_stat.stat.exists

- name: Stop existing docker-compose services
  shell: |
    cd {{ dest_path }}
    docker-compose down
  ignore_errors: true

- name: Start docker-compose services
  shell: |
    cd {{ dest_path }}
    docker-compose up -d
  notify: docker-compose-started

- name: Display deployment summary
  debug:
    msg:
      - "Docker Deployment Complete!"
      - "App: {{ docker_app_dir }}"
      - "Location: {{ dest_path }}"
      - "Manage: cd {{ dest_path }} && docker-compose [up|down|logs]" 