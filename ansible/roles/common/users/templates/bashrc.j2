# ~/.bashrc - Enhanced with modern features and best practices

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# =============================================================================
# HISTORY CONFIGURATION
# =============================================================================

# Append to history file, don't overwrite it
shopt -s histappend

# Save multiline commands as one command
shopt -s cmdhist

# Huge history. Doesn't appear to slow things down, so why not?
HISTSIZE=500000
HISTFILESIZE=100000

# Avoid duplicate entries
HISTCONTROL="erasedups:ignoreboth"

# Don't record some commands
export HISTIGNORE="&:[ ]*:exit:ls:bg:fg:history:clear"

# Use standard ISO 8601 timestamp
HISTTIMEFORMAT='%F %T '

# =============================================================================
# SHELL OPTIONS
# =============================================================================

# Check the window size after each command and update LINES and COLUMNS
shopt -s checkwinsize

# Correct spelling errors during tab-completion
shopt -s dirspell

# Correct spelling errors in arguments supplied to cd
shopt -s cdspell

# Autocorrect on directory names to match a glob
shopt -s direxpand

# Turn on recursive globbing (enables ** to recurse all directories)
shopt -s globstar 2> /dev/null

# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob

# =============================================================================
# BETTER CD
# =============================================================================

# Prepend cd to directory names automatically
shopt -s autocd 2> /dev/null

# =============================================================================
# COMPLETIONS
# =============================================================================

# Enable programmable completion features
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# =============================================================================
# COLORS
# =============================================================================

# Enable color support
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi

# Color definitions
export RED='\033[0;31m'
export GREEN='\033[0;32m'
export YELLOW='\033[0;33m'
export BLUE='\033[0;34m'
export PURPLE='\033[0;35m'
export CYAN='\033[0;36m'
export WHITE='\033[0;37m'
export BOLD='\033[1m'
export NC='\033[0m' # No Color

# =============================================================================
# AMAZING PROMPT
# =============================================================================

# Git branch in prompt
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

# Show exit code if non-zero
show_exit_code() {
    local exit_code=$?
    if [ $exit_code != 0 ]; then
        echo " [EXIT:$exit_code]"
    fi
}

# Cool prompt with git branch and exit status
if [[ $EUID == 0 ]]; then
    # Root user prompt (red)
    PS1='\[\e[0;31m\]\u\[\e[0m\]@\[\e[0;33m\]\h\[\e[0m\]:\[\e[0;34m\]\w\[\e[0;35m\]$(parse_git_branch)\[\e[0;31m\]$(show_exit_code)\[\e[0m\] # '
else
    # Regular user prompt (green)
    PS1='\[\e[0;32m\]\u\[\e[0m\]@\[\e[0;33m\]\h\[\e[0m\]:\[\e[0;34m\]\w\[\e[0;35m\]$(parse_git_branch)\[\e[0;31m\]$(show_exit_code)\[\e[0m\] $ '
fi

# =============================================================================
# USEFUL ALIASES
# =============================================================================

# Navigation
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ~='cd ~'
alias -- -='cd -'

# List files
alias ls='ls --color=auto --group-directories-first'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias lh='ls -lah'
alias tree='tree -C'

# Grep with color
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# Safety first
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# Make directories
alias mkdir='mkdir -pv'

# Quick edits
alias bashrc='${EDITOR:-nano} ~/.bashrc'
alias reload='source ~/.bashrc'

# System info
alias df='df -h'
alias du='du -h'
alias free='free -h'
alias ps='ps auxf'
alias psg='ps aux | grep -v grep | grep -i -e VSZ -e'
alias top='htop'

# Network
alias ping='ping -c 5'
alias ports='netstat -tulanp'
alias myip='curl -s http://whatismyip.akamai.com/'

# Docker shortcuts (since we're adding users to docker group)
alias d='docker'
alias dc='docker-compose'
alias dcup='docker-compose up -d'
alias dcdown='docker-compose down'
alias dclogs='docker-compose logs -f'
alias dps='docker ps'
alias dpsa='docker ps -a'
alias di='docker images'
alias dex='docker exec -it'

# Git shortcuts
alias g='git'
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git log --oneline'
alias gd='git diff'
alias gb='git branch'
alias gco='git checkout'

# System updates (works on Ubuntu/Debian)
alias update='sudo apt update && sudo apt upgrade'
alias install='sudo apt install'
alias search='apt search'

# Systemd + Docker
alias ss="sudo systemctl"
alias sdr="sudo systemctl daemon-reload"
alias sr="sudo systemctl restart"
alias j="sudo journalctl --no-hostname -o cat -f -u"
alias d="docker "
alias h="history "
alias sd="sudo docker "
alias sdc="sudo docker compose"
alias sdl="sudo docker logs"
alias sdps="sudo docker ps -a"

# Quick file operations
alias count='find . -type f | wc -l'
alias cpuinfo='lscpu'
alias meminfo='free -h -l -t'

# Custom aliases from ansible
{% for alias in user.aliases | default([]) %}
alias {{ alias }}
{% endfor %}


# =============================================================================
# USEFUL FUNCTIONS
# =============================================================================

# Extract any archive
extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Create and enter directory
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Find process by name
psgrep() {
    ps aux | grep "$1" | grep -v grep
}

# Weather report
weather() {
    curl -s "wttr.in/$1"
}

# Quick backup
backup() {
    cp "$1"{,.bak}
}

# Find large files
findbig() {
    find . -size +${1:-100M} -type f -exec ls -lh {} \; | awk '{ print $NF ": " $5 }'
}

# Get local IP address
localip() {
    hostname -I | awk '{print $1}'
}

# Kill processes by name
killall_by_name() {
    ps aux | grep "$1" | grep -v grep | awk '{print $2}' | xargs kill -9
}

# Docker cleanup
docker_cleanup() {
    echo "Cleaning up Docker..."
    docker system prune -af
    docker volume prune -f
    echo "Docker cleanup complete!"
}

# =============================================================================
# EXPORTS
# =============================================================================

# Better less for man pages
export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'

# Default editor
export EDITOR=${EDITOR:-nano}
export VISUAL=${VISUAL:-nano}

# =============================================================================
# WELCOME MESSAGE
# =============================================================================

echo -e "${GREEN}Welcome back, $(whoami)!${NC}"
echo -e "${BLUE}Date: $(date)${NC}"
echo -e "${YELLOW}System: $(uname -s) $(uname -r)${NC}"
echo -e "${PURPLE}Memory: $(free -h | awk '/^Mem:/ {print $3 "/" $2}')${NC}"
echo -e "${CYAN}Home: $HOME${NC}"
echo ""

# Show git status if in a git repository
if git rev-parse --is-inside-work-tree &>/dev/null; then
    echo -e "${GREEN}Git repository detected!${NC}"
    echo ""
    git status --short
    echo ""
fi

echo ""

# =============================================================================
# LOCAL CUSTOMIZATIONS
# =============================================================================

# Source local customizations if they exist
if [ -f ~/.bashrc.local ]; then
    source ~/.bashrc.local
fi 